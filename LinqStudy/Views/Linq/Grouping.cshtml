@{
    ViewBag.Title = "Grouping";
}

<div id="nav">当前位置: Linq学习之旅 - Grouping</div>
<!--GroupBy - Simple 1-->
<h2 id="Linq1">1、GroupBy - Simple 1</h2>
<p>按数组元素除5的余数进行分组</p>
<pre>
    public void Linq4()
    {
        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
     
        var numberGroups =
            from n in numbers
            group n by n % 5 into g
            select new { Remainder = g.Key, Numbers = g };
     
        foreach (var g in numberGroups)
        {
            Console.WriteLine("除以5余数为{0}的元素有:", g.Remainder);
            foreach (var n in g.Numbers)
            {
                Console.WriteLine(n);
            }
        }
    }
</pre>
<a href="/Linq/Grouping1/">点击运行</a>
<h3>运行结果：</h3>
<div class="res">
@if (ViewData["GroupingSample1"] != null)
{
    foreach (string s in ViewData["GroupingSample1"] as List<string>)
    {
        @Html.Raw(s + "<br/>");
    }
}
</div>

<!--GroupBy - Simple 2-->
<h2 id="Linq2">2、GroupBy - Simple 2</h2>
<p>按数组元素的首字母进行分组</p>
<pre>
    public void Linq2()
    {
        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
     
        var numberGroups =
            from n in numbers
            group n by n % 5 into g
            select new { Remainder = g.Key, Numbers = g };
     
        foreach (var g in numberGroups)
        {
            Console.WriteLine("首字母为{0}的元素有:", g.Remainder);
            foreach (var n in g.Numbers)
            {
                Console.WriteLine(n);
            }
        }
    }
</pre>
<a href="/Linq/Grouping2/">点击运行</a>
<h3>运行结果：</h3>
<div class="res">
@if (ViewData["GroupingSample2"] != null)
{
    foreach (string s in ViewData["GroupingSample2"] as List<string>)
    {
        @Html.Raw(s + "<br/>");
    }
}
</div>

<!--GroupBy - Simple 3-->
<h2 id="Linq3">3、GroupBy - Simple 3</h2>
<p>按数组元素的首字母进行分组</p>
<pre>
    public void Linq3()
    {
        List<Product> products = GetProductList();
     
        var orderGroups =
            from p in products
            group p by p.Category into g
            select new { Category = g.Key, Products = g };
     
        ObjectDumper.Write(orderGroups, 1);
    }
</pre>
<a href="/Linq/Grouping3/">点击运行</a>
<h3>运行结果：</h3>
<div class="res">
@if (ViewData["GroupingSample3"] != null)
{
    foreach (string s in ViewData["GroupingSample3"] as List<string>)
    {
        @Html.Raw(s + "<br/>");
    }
}
</div>

<!--GroupBy - Simple 4-->
<h2 id="Linq4">4、GroupBy - Nested 4</h2>
<p>对每一项元素加1</p>
<pre>
    public void Linq43()
    {
        List<Customer> customers = GetCustomerList();
     
        var customerOrderGroups =
            from c in customers
            select
                new
                {
                    c.CompanyName,
                    YearGroups =
                        from o in c.Orders
                        group o by o.OrderDate.Year into yg
                        select
                            new
                            {
                                Year = yg.Key,
                                MonthGroups =
                                    from o in yg
                                    group o by o.OrderDate.Month into mg
                                    select new { Month = mg.Key, Orders = mg }
                            }
                };
     
        ObjectDumper.Write(customerOrderGroups, 3);
    }
</pre>
<a href="/Linq/Grouping4/">点击运行</a>
<h3>运行结果：</h3>
<div class="res">
    @if (ViewData["GroupingSample4"] != null)
     {
        @Html.Raw("对订单按公司名、年、月进行分组：");
        int l = (ViewData["GroupingSample4"] as List<string>).Count;
        int i = 0;
        foreach (var p in ViewData["GroupingSample4"] as List<string>)
        {
            i++;
            if (i < 5 || i > l - 5)
            {
                @Html.Raw("<br/>" + p.ToString());
            }
            else if(i==6)
            { 
                 @Html.Raw("<br/>---------------此处省略N多条记录！！-----------------");
            }
        }
     }
</div>

<!--GroupBy - Comparer-->
<h2 id="Linq5">5、GroupBy - Comparer</h2>
<p>自定义比较器对数据中包含有相同字母的元素进行分组</p>
<pre>
    public void Linq5()
    {
        string[] anagrams = { "from   ", " salt", " earn ", "  last   ", " near ", " form  " };     
        var orderGroups = anagrams.GroupBy(w => w.Trim(), new AnagramEqualityComparer());     
        ObjectDumper.Write(orderGroups, 1);
    }     
    public class AnagramEqualityComparer : IEqualityComparer&lt;string&gt;
    {
        public bool Equals(string x, string y)
        {
            return getCanonicalString(x) == getCanonicalString(y);
        }     
        public int GetHashCode(string obj)
        {
            return getCanonicalString(obj).GetHashCode();
        }     
        private string getCanonicalString(string word)
        {
            char[] wordChars = word.ToCharArray();
            Array.Sort&lt;char&gt;(wordChars);
            return new string(wordChars);
        }
    }

</pre>
<a href="/Linq/Grouping5/">点击运行</a>
<h3>运行结果：</h3>
<div class="res">
@if (@ViewData["GroupingSample5"] != null)
{
    @Html.Raw(@ViewData["GroupingSample5"].ToString())
}
</div>

<!--GroupBy - Comparer，Mapped-->
<h2 id="Linq6">6、GroupBy - Comparer，Mapped</h2>
<p>对数据中包含有相同字母的元素进行分组,并对元素转换成大写</p>
<pre>
    public void Linq5()
    {
        string[] anagrams = { "from   ", " salt", " earn ", "  last   ", " near ", " form  " };     
        var orderGroups = anagrams.GroupBy( w => w.Trim(), a => a.ToUpper(), new AnagramEqualityComparer() );
        ObjectDumper.Write(orderGroups, 1);
    }     
    public class AnagramEqualityComparer : IEqualityComparer&lt;string&gt;
    {
        public bool Equals(string x, string y){
            return getCanonicalString(x) == getCanonicalString(y);
        }     
        public int GetHashCode(string obj) {
            return getCanonicalString(obj).GetHashCode();
        }     
        private string getCanonicalString(string word){
            char[] wordChars = word.ToCharArray();
            Array.Sort&lt;char&gt;(wordChars);
            return new string(wordChars);
        }
    }

</pre>
<a href="/Linq/Grouping6/">点击运行</a>
<h3>运行结果：</h3>
<div class="res">
@if (@ViewData["GroupingSample6"] != null)
{
    @Html.Raw(@ViewData["GroupingSample6"].ToString())
}
</div>


@Html.Raw("<script>goTo('" + ViewData["Anchor"] + "');</script>")